:
# #  comment
# () grouping
# [] optional
# *  zero or more
# +  one or more
# |  alternative

program    ::= (include)* (structdecl | vardecl | fundecl | fundef)* EOF

include    ::= "#include" STRING_LITERAL

structdecl ::= structtype "{" (vardecl)+ "}" ";"    # structure declaration

vardecl    ::= type IDENT ("[" INT_LITERAL "]")* ";" # variable declaration, (e.g. int a;), or multi-dimensional array declaration, (e.g. int a[2][5];)

fundef    ::= type IDENT "(" params ")" block       # function definition

fundecl   ::= type IDENT "(" params ")" ";"         # function declaration

type       ::= ("int" | "char" | "void" | structtype) ("*")*
structtype ::= "struct" IDENT

params     ::= [ type IDENT ("[" INT_LITERAL "]")* ("," type IDENT ("[" INT_LITERAL "]")*)* ]



stmt       ::= block
             | "while" "(" exp ")" stmt              # while loop
             | "if" "(" exp ")" stmt ["else" stmt]   # if then else
             | "return" [exp] ";"                    # return
             | exp ";"                               # expression statement, e.g. a function call
             | "continue" ";"                        # continue
             | "break" ";"                           # break

block      ::= "{" (vardecl)* (stmt)* "}"

exp        ::= exp1
exp1       ::= exp2 "="  exp | exp2                                            # assign (right to left)
exp2       ::= exp3 ("||" exp)*                                                # logor (left to right)
exp3       ::= exp4 ("&&" exp)*                                                # logand (left to right)
exp4       ::= exp5 (("=="|"!=") exp)*                                         # eq, neq (left to right)
exp5       ::= exp6 (("<"|"<="|">"|">=") exp)*                                 # comparaisons (left to right)
exp6       ::= exp7 (("+"|"-") exp)*                                           # add, sub (left to right)
exp7       ::= exp8 (("*"|"/"|"%") exp)*                                       # mult, div, rem (left to right)
exp8       ::= exp9 ("&"|"*"|"+"|"-"|"(" type ")") exp9 | exp9                 # address of, dereference, cast, plus, minus (right to left)
exp9       ::= "(" exp ")" | exp10 ("." IDENT)* | exp10 ("[" exp "]")*         # func call, array subscripting (left to right)
                --> look ahead first exp or not
exp10      ::= IDENT | INT_LITERAL | CHAR_LITERAL                              # primary
                | STRING_LITERAL | "sizeof" "(" type ")"
                | IDENT "(" [exp ("," exp)* ] ")"
                --> look ahead if LPAR
