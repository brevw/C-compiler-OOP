:
# #  comment
# () grouping
# [] optional
# *  zero or more
# +  one or more
# |  alternative

program    ::= (include)* (structdecl | vardecl | fundecl | fundef)* EOF

include    ::= "#include" STRING_LITERAL

structdecl ::= structtype "{" (vardecl)+ "}" ";"    # structure declaration

vardecl    ::= type IDENT ("[" INT_LITERAL "]")* ";" # variable declaration, (e.g. int a;), or multi-dimensional array declaration, (e.g. int a[2][5];)

fundef    ::= type IDENT "(" params ")" block       # function definition

fundecl   ::= type IDENT "(" params ")" ";"         # function declaration

type       ::= ("int" | "char" | "void" | structtype) ("*")*
structtype ::= "struct" IDENT

params     ::= [ type IDENT ("[" INT_LITERAL "]")* ("," type IDENT ("[" INT_LITERAL "]")*)* ]



stmt       ::= block
             | "while" "(" exp ")" stmt              # while loop
             | "if" "(" exp ")" stmt ["else" stmt]   # if then else
             | "return" [exp] ";"                    # return
             | exp ";"                               # expression statement, e.g. a function call
             | "continue" ";"                        # continue
             | "break" ";"                           # break

block      ::= "{" (vardecl)* (stmt)* "}"

expr        ::= expr1
expr1       ::= expr2 "="  expr1 | expr2                                           # assign (right to left)
expr2       ::= expr3 ("||" expr3)*                                               # logor (left to right)
expr3       ::= expr4 ("&&" expr4)*                                               # logand (left to right)
expr4       ::= expr5 (("=="|"!=") expr5)*                                        # eq, neq (left to right)
expr5       ::= expr6 (("<"|"<="|">"|">=") expr6)*                                # comparaisons (left to right)
expr6       ::= expr7 (("+"|"-") expr7)*                                          # add, sub (left to right)
expr7       ::= expr8 (("*"|"/"|"%") expr8)*                                      # mult, div, rem (left to right)
expr8       ::= ("&"|"*"|"+"|"-"|"(" type ")") expr8 | expr9                      # address of, dereference, cast, plus, minus (right to left)
funcall     ::= IDENT "(" [expr ("," expr)* ] ")"
expr9       ::=( funcall
                 | IDENT
                 | INT_LITERAL
                 | CHAR_LITERAL                                # primary
                 | STRING_LITERAL
                 | "sizeof" "(" type ")"
                 | "(" expr ")" ) expr9_prime

expr9_prime ::=(
                |(("." IDENT) |
                  ("[" expr "]"))*
                | epsilon


                --> look ahead if LPAR
